{"version":3,"file":"index.js","sources":["../../src/pool-stable/encoder.ts","../../src/pool-weighted/encoder.ts","../../src/pool-weighted/normalizedWeights.ts","../../../node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../src/pool-utils/poolId.ts","../../src/pool-utils/encoder.ts","../../src/utils/errors.ts","../../src/utils/signatures.ts","../../src/utils/permit.ts","../../src/utils/assetHelpers.ts","../../src/types.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [StablePoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool proportionally\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBptOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [StablePoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]);\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param exitTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool proportionally\n   * @param bptAmountIn - the amount of BPT to burn in exchange for withdrawn tokens\n   */\n  static exitExactBptInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [StablePoolExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, bptAmountIn]);\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n  ADD_TOKEN,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  REMOVE_TOKEN,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256[]'], [WeightedPoolJoinKind.INIT, amountsIn]);\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (amountsIn: BigNumberish[], minimumBPT: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (bptAmountOut: BigNumberish, enterTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT, bptAmountOut, enterTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (bptAmountIn: BigNumberish, exitTokenIndex: number): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, bptAmountIn, exitTokenIndex]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]);\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (amountsOut: BigNumberish[], maxBPTAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, amountsOut, maxBPTAmountIn]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool to remove a token.\n   * This can only be done by the pool owner.\n   */\n  static exitForRemoveToken = (tokenIndex: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [WeightedPoolExitKind.REMOVE_TOKEN, tokenIndex]);\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce((total: BigNumber, weight) => total.add(weight), Zero);\n  return totalWeight.eq(ONE);\n};\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): { address: string; specialization: PoolSpecialization; nonce: BigNumber } => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\n// RECOVERY_MODE must match BasePoolUserData.RECOVERY_MODE_EXIT_KIND, the value that\n// (Legacy)BasePool uses to detect the special exit enabled in recovery mode.\nexport enum BasePoolExitKind {\n  RECOVERY_MODE = 255,\n}\n\nexport class BasePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting any Pool in recovery mode, by removing tokens in return for\n   * an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static recoveryModeExit = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(['uint256', 'uint256'], [BasePoolExitKind.RECOVERY_MODE, bptAmountIn]);\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '105': 'INSUFFICIENT_DATA',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'FEATURE_DISABLED',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '346': 'SET_SWAP_FEE_DURING_FEE_CHANGE',\n  '347': 'SET_SWAP_FEE_PENDING_FEE_CHANGE',\n  '348': 'CHANGE_TOKENS_DURING_WEIGHT_CHANGE',\n  '349': 'CHANGE_TOKENS_PENDING_WEIGHT_CHANGE',\n  '350': 'MAX_WEIGHT',\n  '351': 'UNAUTHORIZED_JOIN',\n  '352': 'MAX_MANAGEMENT_AUM_FEE_PERCENTAGE',\n  '353': 'FRACTIONAL_TARGET',\n  '354': 'ADD_OR_REMOVE_BPT',\n  '355': 'INVALID_CIRCUIT_BREAKER_BOUNDS',\n  '356': 'CIRCUIT_BREAKER_TRIPPED',\n  '357': 'MALICIOUS_QUERY_REVERT',\n  '358': 'JOINS_EXITS_DISABLED',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '435': 'INVALID_OPERATION',\n  '436': 'CODEC_OVERFLOW',\n  '437': 'IN_RECOVERY_MODE',\n  '438': 'NOT_IN_RECOVERY_MODE',\n  '439': 'INDUCED_FAILURE',\n  '440': 'EXPIRED_SIGNATURE',\n  '441': 'MALFORMED_SIGNATURE',\n  '442': 'SAFE_CAST_VALUE_CANT_FIT_UINT64',\n  '443': 'UNHANDLED_FEE_TYPE',\n  '444': 'BURN_FROM_ZERO',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n  '603': 'AUM_FEE_PERCENTAGE_TOO_HIGH',\n  '700': 'SPLITTER_FEE_PERCENTAGE_TOO_HIGH',\n  '998': 'UNIMPLEMENTED',\n  '999': 'SHOULD_NOT_HAPPEN',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean => Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(([, message]) => message === error);\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (calldata: string, deadline: BigNumberish, signature: string): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return { ...splitSignature(signature), deadline: BigNumber.from(deadline) };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{ v: number; r: string; s: string; deadline: BigNumber; nonce: BigNumber }> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  // Hack around some tokens not exposing a `version()` function.\n  // If they do then use it, otherwise assume that their version is \"1\".\n  let version = '1';\n  try {\n    if (token.version) {\n      version = await token.version();\n    }\n  } catch {\n    // eslint-disable-prev-line no-empty\n  }\n\n  const domain = {\n    name: await token.name(),\n    version,\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return { ...splitSignature(signature), deadline: BigNumber.from(deadline), nonce: BigNumber.from(nonce) };\n};\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number => (tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1);\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean => getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string => (this.isETH(token) ? this.WETH : token);\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(tokens: string[], ...others: unknown[][]): [string[], ...unknown[][]] {\n    others.forEach((array) => invariant(tokens.length === array.length, 'array length mismatch'));\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [string, ...unknown[]][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) => cmpTokens(tokenA, tokenB));\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(sortedTranspose) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\nexport type FundManagement = {\n  sender: string;\n  fromInternalBalance: boolean;\n  recipient: string;\n  toInternalBalance: boolean;\n};\n\n// Swaps\n\nexport enum SwapKind {\n  GivenIn = 0,\n  GivenOut,\n}\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapKind;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  kind: SwapKind;\n  singleSwap: SingleSwap;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapKind;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n};\n\nexport type SwapRequest = {\n  kind: SwapKind;\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumberish;\n  poolId: string;\n  lastChangeBlock: BigNumberish;\n  from: string;\n  to: string;\n  userData: string;\n};\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: BigNumberish[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n\n// Stakeless gauges\n\nexport enum GaugeType {\n  LiquidityMiningCommittee = 0,\n  veBAL,\n  Ethereum,\n  Polygon,\n  Arbitrum,\n  Optimism,\n  Gnosis,\n  ZkSync,\n}\n"],"names":["StablePoolJoinKind","StablePoolExitKind","defaultAbiCoder","WeightedPoolJoinKind","WeightedPoolExitKind","ONE","Zero","BigNumber","BasePoolExitKind","Signer","RelayerAction","hexZeroPad","hexValue","splitSignature","MAX_DEADLINE","AddressZero","getAddress","PoolSpecialization","SwapKind","UserBalanceOpKind","PoolBalanceOpKind","GaugeType"],"mappings":"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"}